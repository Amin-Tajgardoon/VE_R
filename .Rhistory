algo.const <- c( "iamb", "fast.iamb", "si.hiton.pc", "mmpc", "gs")
tests <-  c( "x2-adf","mi") #, "mc-mi", "smc-mi") #c( "mc-mi", "x2-adf")
## c("mi", "mi-adf", "mc-mi", "smc-mi", "sp-mi", "mi-sh", "x2", "x2-adf", "mc-x2","smc-x2","sp-x2")
optimized = TRUE
# datasets <- list.of.dataset(flu, target)
datasets <- list("full" = flu)
for(d in 1:length(datasets)){
df <- datasets[[d]]
df.name <- names(datasets)[d]
print(paste("dataset:",df.name))
# forbid edge from class variable
x_names = colnames(df)[colnames(df) != target]
bl = data.frame(from = rep(target,length(x_names)), to = x_names)
#results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.score, max.iter = Inf,
#                 score = scores, estimator = estimators, blacklist = bl, results = results, optimized = optimized, maxp = 8,
#                  restart = 5, seed = seed)
#results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.const,
#                test = tests, estimator = estimators, blacklist = bl, results = results, optimized = optimized, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
}
results
library(bnlearn)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/get_measures.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/data_preprocess.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/flu_data_preprocess.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/bivariate_analysis.R")
seed = 1234
set.seed(seed)
dataDir <- 'C:/Users/mot16/projects/master/data/'
outDir <- 'C:/Users/mot16/projects/master/output/'
fileName <- "gsk_108134_joined_allvars"
dataPath <- paste(dataDir,fileName,'.csv',sep = "")
target <- "ANTIGEN_MATCHED"
pos_class <- "MATCH"
## read & clean data
flu <- data.preprocess(read.csv(file = dataPath, stringsAsFactors = F), seed)
results  <-  data.frame(dataset= character(), test_size = numeric(), algorithm = character(), score = character(), estimator = character(),
test = character(), RMSE = numeric(), AUC = numeric(), ACC = numeric(),
MCE = numeric(), ECE = numeric(), R2 = numeric(), run_time = character(), stringsAsFactors = F)
algo.score <-  c("tabu","hc")
scores <- c("bde", "mbde","k2", "bic", "aic") # c("bde", "mbde","loglik","bde", "k2", "aic", "bic")
estimators <- c("bayes", "mle")
algo.const <- c( "iamb", "fast.iamb", "si.hiton.pc", "mmpc", "gs")
tests <-  c( "x2-adf","mi") #, "mc-mi", "smc-mi") #c( "mc-mi", "x2-adf")
## c("mi", "mi-adf", "mc-mi", "smc-mi", "sp-mi", "mi-sh", "x2", "x2-adf", "mc-x2","smc-x2","sp-x2")
optimized = TRUE
# datasets <- list.of.dataset(flu, target)
datasets <- list("full" = flu)
for(d in 1:length(datasets)){
df <- datasets[[d]]
df.name <- names(datasets)[d]
print(paste("dataset:",df.name))
# forbid edge from class variable
x_names = colnames(df)[colnames(df) != target]
bl = data.frame(from = rep(target,length(x_names)), to = x_names)
#results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.score, max.iter = Inf,
#                 score = scores, estimator = estimators, blacklist = bl, results = results, optimized = optimized, maxp = 8,
#                  restart = 5, seed = seed)
#results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.const,
#                test = tests, estimator = estimators, blacklist = bl, results = results, optimized = optimized, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
}
warnings()
results
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
summary(p)
table(train_set$ANTIGEN_MATCHED)
table(test_set$ANTIGEN_MATCHED)
table(test_set$ANTIGEN_MATCHED)
table(train_set$ANTIGEN_MATCHED)
unique(train_set$ANTIGEN_MATCHED)
unique(test_set$ANTIGEN_MATCHED)
y = train_set$ANTIGEN_MATCHED
levels(y == 1)
levels(y[y == 1])
unique(data$ANTIGEN_MATCHED)
contrasts(y)
y0 = y[y==0]
levels(y0)
droplevels(y0)
y_0 = droplevels(y0)
unique(y_0)
y = test_set$ANTIGEN_MATCHED
y0 = y[y==0]
y_0 = droplevels(y0)
unique(y_0)
levels(y)
levels(y) = c("0", "1")
levels(y)
table(y)
y0 = y[y==0]
y_0 = droplevels(y0)
unique(y_0)
length(y_0)
y = test_set$ANTIGEN_MATCHED
y0 = y[y==0]
y_0 = droplevels(y0)
unique(y_0)
length(y_0)
length(p) == length(match_probs[-fld])
length(p)
length(match_probs[-fld])
dim(test_set)
? predict
length(p)
length(fld)
dim(train_set)
dim(test_set)
colnames(train_set)
colnames(test_set)
dim(test_set[, colnames(test_set) %in% colnames(train_set)])
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
dim(test_set)
dim(train_set)
length(p)
summary(p)
(1:10)[c(1,2)]
(10:20)[c(1,2)]
warnings()
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
length(p)
dim(test_set[, colnames(test_set) != target])
plot(p)
head(test_set[1:6])
library(bnlearn)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
length(p)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
length(p)
summary(p)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
levels(train_set$RACE_wdemog)
levels(test_set$RACE_wdemog)
glm$xlevels$RACE_wdemog
levels(train_set$RACE_wdemog)
levels(test_set$RACE_wdemog)
glm$xlevels$RACE_wdemog
table(train_set$RACE_wdemog)
glm$xlevels$RACE_wdemog = union(glm$xlevels$RACE_wdemog, levels(test_set$RACE_wdemog))
glm$xlevels$RACE_wdemog
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
algorithm = "glm", results = results, seed = seed)
warnings()
results
k-folds <-  createFolds(y = flu$ANTIGEN_MATCHED, k = 10, list = F)
set.seed(seed)
k_folds <-  createFolds(y = flu$ANTIGEN_MATCHED, k = 10, list = F)
head(k_folds)
dim(k_folds)
? createFolds
k_folds <-  createFolds(y = flu$ANTIGEN_MATCHED, k = 10, list = T)
dim(k_folds)
head(k_folds)
df.flds = data.frame(k_folds)
m = matrix(k_folds)
head(m)
dim(m)
m = matrix(unlist(k_folds))
dim(m)
head(m)
m = do.call(cbind.data.frame, k_folds)
write(k_folds,file = paste0(outDir,"k_folds.txt"))
write(k_folds$Fold01,file = paste0(outDir,"k_folds.txt"))
write(k_folds$Fold01,file = paste0(outDir,"k_folds.txt"), ncolumns = length(k_folds$Fold01))
write(k_folds$Fold02, file = paste0(outDir,"k_folds.txt"), ncolumns = length(k_folds$Fold02), append = T)
? do.call
write.folds = function(fold){
write(fold, file = paste0(outDir,"k_folds.txt"), ncolumns = length(fold), append = T)
}
do.call(write..folds, k_folds)
do.call(write.folds, k_folds)
length(k_folds[1])
length(k_folds[[1]])
k_folds[Fold01]
k_folds["Fold01"]
lapply(names(k_folds), function(i) write.folds(k_folds[i]))
write.folds = function(fold){
cat(fold)
write(fold, file = paste0(outDir,"k_folds.txt"), ncolumns = length(fold), append = T)
}
lapply(names(k_folds), function(i) write.folds(k_folds[i]))
write.folds = function(fold){
print(fold)
write(fold, file = paste0(outDir,"k_folds.txt"), ncolumns = length(fold), append = T)
}
lapply(names(k_folds), function(i) write.folds(k_folds[i]))
i
write.folds = function(fold){
#print(fold)
write(fold, file = paste0(outDir,"k_folds.txt"), ncolumns = length(fold), append = T)
}
lapply(names(k_folds), function(i) write.folds(unlist(k_folds[i])))
lapply(names(k_folds), function(i) write.folds(unlist(k_folds[i])))
lapply(names(k_folds), function(i) write.folds(unlist(k_folds[i])))
"+" <- function(s1,s2) (paste0(s1,s2))
"%+%" <- function(s1,s2) (paste0(s1,s2))
"hello" %+% "world"
"hello " %+% " world"
write.csv(x = flu, file = dataDir %+% "flu.csv", row.names = F)
dataDir %+% "flu.csv"
paste0(outDir,"k_folds.txt")
library(bnlearn)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/get_measures.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/data_preprocess.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/flu_data_preprocess.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/bivariate_analysis.R")
seed = 1234
set.seed(seed)
dataDir <- 'C:/Users/mot16/projects/master/data/'
outDir <- 'C:/Users/mot16/projects/master/output/'
fileName <- "gsk_108134_joined_allvars"
dataPath <- paste(dataDir,fileName,'.csv',sep = "")
target <- "ANTIGEN_MATCHED"
pos_class <- "MATCH"
## read & clean data
flu <- data.preprocess(read.csv(file = dataPath, stringsAsFactors = F), seed)
results  <-  data.frame(dataset= character(), test_size = numeric(), algorithm = character(), score = character(), estimator = character(),
test = character(), RMSE = numeric(), AUC = numeric(), ACC = numeric(),
MCE = numeric(), ECE = numeric(), R2 = numeric(), run_time = character(), stringsAsFactors = F)
algo.score <-  c("tabu","hc")
scores <- c("bde", "mbde","k2", "bic", "aic") # c("bde", "mbde","loglik","bde", "k2", "aic", "bic")
estimators <- c("bayes", "mle")
algo.const <- c( "iamb", "fast.iamb", "si.hiton.pc", "mmpc", "gs")
tests <-  c( "x2-adf","mi") #, "mc-mi", "smc-mi") #c( "mc-mi", "x2-adf")
## c("mi", "mi-adf", "mc-mi", "smc-mi", "sp-mi", "mi-sh", "x2", "x2-adf", "mc-x2","smc-x2","sp-x2")
optimized = TRUE
# datasets <- list.of.dataset(flu, target)
datasets <- list("full" = flu)
for(d in 1:length(datasets)){
df <- datasets[[d]]
df.name <- names(datasets)[d]
print(paste("dataset:",df.name))
# forbid edge from class variable
x_names = colnames(df)[colnames(df) != target]
bl = data.frame(from = rep(target,length(x_names)), to = x_names)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.score, max.iter = Inf,
score = scores, estimator = estimators, blacklist = bl, results = results, optimized = optimized, maxp = 8,
restart = 5, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.const,
test = tests, estimator = estimators, blacklist = bl, results = results, optimized = optimized, seed = seed)
# results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
#             algorithm = "glm", results = results, seed = seed)
}
library(bnlearn)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/get_measures.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/data_preprocess.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/flu_data_preprocess.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/bivariate_analysis.R")
seed = 1234
set.seed(seed)
dataDir <- 'C:/Users/mot16/projects/master/data/'
outDir <- 'C:/Users/mot16/projects/master/output/'
fileName <- "gsk_108134_joined_allvars"
dataPath <- paste(dataDir,fileName,'.csv',sep = "")
target <- "ANTIGEN_MATCHED"
pos_class <- "MATCH"
## read & clean data
flu <- data.preprocess(read.csv(file = dataPath, stringsAsFactors = F), seed)
results  <-  data.frame(dataset= character(), test_size = numeric(), algorithm = character(), score = character(), estimator = character(),
test = character(), RMSE = numeric(), AUC = numeric(), ACC = numeric(),
MCE = numeric(), ECE = numeric(), R2 = numeric(), run_time = character(), stringsAsFactors = F)
algo.score <-  c("tabu","hc")
scores <- c("bde", "mbde","k2", "bic", "aic") # c("bde", "mbde","loglik","bde", "k2", "aic", "bic")
estimators <- c("bayes", "mle")
algo.const <- c( "iamb", "fast.iamb", "si.hiton.pc", "mmpc", "gs")
tests <-  c( "x2-adf","mi") #, "mc-mi", "smc-mi") #c( "mc-mi", "x2-adf")
## c("mi", "mi-adf", "mc-mi", "smc-mi", "sp-mi", "mi-sh", "x2", "x2-adf", "mc-x2","smc-x2","sp-x2")
optimized = TRUE
# datasets <- list.of.dataset(flu, target)
datasets <- list("full" = flu)
for(d in 1:length(datasets)){
df <- datasets[[d]]
df.name <- names(datasets)[d]
print(paste("dataset:",df.name))
# forbid edge from class variable
x_names = colnames(df)[colnames(df) != target]
bl = data.frame(from = rep(target,length(x_names)), to = x_names)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.score, max.iter = Inf,
score = scores, estimator = estimators, blacklist = bl, results = results, optimized = optimized, maxp = 8,
restart = 5, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.const,
test = tests, estimator = estimators, blacklist = bl, results = results, optimized = optimized, seed = seed)
# results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
#             algorithm = "glm", results = results, seed = seed)
}
tabke(result$y_test)
table(result$y_test)
dim(df)
table(df$ANTIGEN_MATCHED)
result$y_test[1:6]
library(bnlearn)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/get_measures.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/data_preprocess.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/flu_data_preprocess.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/bivariate_analysis.R")
seed = 1234
set.seed(seed)
dataDir <- 'C:/Users/mot16/projects/master/data/'
outDir <- 'C:/Users/mot16/projects/master/output/'
fileName <- "gsk_108134_joined_allvars"
dataPath <- paste(dataDir,fileName,'.csv',sep = "")
target <- "ANTIGEN_MATCHED"
pos_class <- "MATCH"
## read & clean data
flu <- data.preprocess(read.csv(file = dataPath, stringsAsFactors = F), seed)
results  <-  data.frame(dataset= character(), test_size = numeric(), algorithm = character(), score = character(), estimator = character(),
test = character(), RMSE = numeric(), AUC = numeric(), ACC = numeric(),
MCE = numeric(), ECE = numeric(), R2 = numeric(), run_time = character(), stringsAsFactors = F)
algo.score <-  c("tabu","hc")
scores <- c("bde", "mbde","k2", "bic", "aic") # c("bde", "mbde","loglik","bde", "k2", "aic", "bic")
estimators <- c("bayes", "mle")
algo.const <- c( "iamb", "fast.iamb", "si.hiton.pc", "mmpc", "gs")
tests <-  c( "x2-adf","mi") #, "mc-mi", "smc-mi") #c( "mc-mi", "x2-adf")
## c("mi", "mi-adf", "mc-mi", "smc-mi", "sp-mi", "mi-sh", "x2", "x2-adf", "mc-x2","smc-x2","sp-x2")
optimized = TRUE
# datasets <- list.of.dataset(flu, target)
datasets <- list("full" = flu)
for(d in 1:length(datasets)){
df <- datasets[[d]]
df.name <- names(datasets)[d]
print(paste("dataset:",df.name))
# forbid edge from class variable
x_names = colnames(df)[colnames(df) != target]
bl = data.frame(from = rep(target,length(x_names)), to = x_names)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.score, max.iter = Inf,
score = scores, estimator = estimators, blacklist = bl, results = results, optimized = optimized, maxp = 8,
restart = 5, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.const,
test = tests, estimator = estimators, blacklist = bl, results = results, optimized = optimized, seed = seed)
# results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
#             algorithm = "glm", results = results, seed = seed)
}
dim(data)
table(data[target])
table(test_set[-fld, target])
table(test_set[-flds$Fold2, target])
dim(test_set)
table(test_set[-fld, target])
table(test_set[fld, target])
table(test_set[-flds$Fold2, target])
length(flds$Fold1)
length(flds$Fold2)
table(test_set[, target])
table(train_set[, target])
table(data[-flds$Fold2, target])
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
library(bnlearn)
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/get_measures.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/data_preprocess.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/flu_data_preprocess.R")
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/bivariate_analysis.R")
seed = 1234
set.seed(seed)
dataDir <- 'C:/Users/mot16/projects/master/data/'
outDir <- 'C:/Users/mot16/projects/master/output/'
fileName <- "gsk_108134_joined_allvars"
dataPath <- paste(dataDir,fileName,'.csv',sep = "")
target <- "ANTIGEN_MATCHED"
pos_class <- "MATCH"
## read & clean data
flu <- data.preprocess(read.csv(file = dataPath, stringsAsFactors = F), seed)
results  <-  data.frame(dataset= character(), test_size = numeric(), algorithm = character(), score = character(), estimator = character(),
test = character(), RMSE = numeric(), AUC = numeric(), ACC = numeric(),
MCE = numeric(), ECE = numeric(), R2 = numeric(), run_time = character(), stringsAsFactors = F)
algo.score <-  c("tabu","hc")
scores <- c("bde", "mbde","k2", "bic", "aic") # c("bde", "mbde","loglik","bde", "k2", "aic", "bic")
estimators <- c("bayes", "mle")
algo.const <- c( "iamb", "fast.iamb", "si.hiton.pc", "mmpc", "gs")
tests <-  c( "x2-adf","mi") #, "mc-mi", "smc-mi") #c( "mc-mi", "x2-adf")
## c("mi", "mi-adf", "mc-mi", "smc-mi", "sp-mi", "mi-sh", "x2", "x2-adf", "mc-x2","smc-x2","sp-x2")
optimized = TRUE
# datasets <- list.of.dataset(flu, target)
datasets <- list("full" = flu)
for(d in 1:length(datasets)){
df <- datasets[[d]]
df.name <- names(datasets)[d]
print(paste("dataset:",df.name))
# forbid edge from class variable
x_names = colnames(df)[colnames(df) != target]
bl = data.frame(from = rep(target,length(x_names)), to = x_names)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.score, max.iter = Inf,
score = scores, estimator = estimators, blacklist = bl, results = results, optimized = optimized, maxp = 8,
restart = 5, seed = seed)
results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class, algorithm = algo.const,
test = tests, estimator = estimators, blacklist = bl, results = results, optimized = optimized, seed = seed)
# results <- cv(df = df,df.name = df.name, target = target, pos_class = pos_class,
#             algorithm = "glm", results = results, seed = seed)
}
y = as.numeric(result$y_test)
table(y)
y[y == 2] = 0
table(y)
summary(result$probs)
sum(Actual == 1)
View(`+`)
res = read.csv(paste0(outDir, "result_lr_l2.csv"))
outDir <- 'C:/Users/mot16/projects/master/output/'
res = read.csv(paste0(outDir, "result_lr_l2.csv"))
head(res)
source("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/get_measures.R")
with(res, getMeasures(YTE = YTE, PTE = PTE))
with(res, l2_m = getMeasures(YTE = YTE, PTE = PTE))
with(res, {l2_m = getMeasures(YTE = YTE, PTE = PTE)})
l2_m
l2_m = with(res, {getMeasures(YTE = YTE, PTE = PTE)})
l2_m
l1_m = with(res, {getMeasures(YTE = YTE, PTE = PTE)})
l1_m
res = read.csv(paste0(outDir, "result_lr_l2_balanced.csv"))
l1_bal_m = with(res, {getMeasures(YTE = YTE, PTE = PTE)})
l1_bal_m
l2_bal_m = with(res, {getMeasures(YTE = YTE, PTE = PTE)})
l2_bal_m
res = read.csv(paste0(outDir, "result_lr_l1_balanced.csv"))
l1_bal_m = with(res, {getMeasures(YTE = YTE, PTE = PTE)})
l1_bal_m
results = read.csv(paste0(outDir, "results_2_19.csv"))
library(ggplot2)
ggplot(results) + geom_col(aes(x = algorithm, y= AUC))
with(results,
ggplot(results[estimator = "bayes"]) + geom_col(aes(x = algorithm, y= AUC))
)
with(results,
ggplot(results[estimator == "bayes"]) + geom_col(aes(x = algorithm, y= AUC))
)
ggplot(results[results$estimator == "bayes"],) + geom_col(aes(x = algorithm, y= AUC))
ggplot(results[results$estimator == "bayes"],) + geom_col(aes(x = algorithm, y= AUC))
ggplot(results[results$estimator == "bayes",]) + geom_col(aes(x = algorithm, y= AUC))
ggplot(results[results$score == "bde",]) + geom_col(aes(x = algorithm, y= AUC))
qplot(x = algorithm, y = AUC, data=results, geom="bar")
qplot(x = algorithm, y = AUC, data=results, geom="bar", stat="identity")
debugSource('C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R')
source('C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/cv.R')
library(rcausal)
require(rcausal)
install.packages("rcausal")
library(rcausal)
library(installr)
updateR()
install.packages("installr")
install.packages("installr")
updateR()
library(installr)
install.packages("stringr")
install.packages("rJava")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
library(rcausal)
library(devtools)
install_github("bd2kccd/r-causal")
install.packages("devtools")
library(devtools)
install_github("bd2kccd/r-causal")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/data_preprocess.R")
debugSource("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R/flu_data_preprocess.R")
setwd("C:/Users/mot16/Box Sync/Master Project/BN representation of VE/code and data-docs/code/VE_R")
seed = 1234
set.seed(seed)
dataDir <- 'C:/Users/mot16/projects/master/data/'
outDir <- 'C:/Users/mot16/projects/master/output/'
fileName <- "gsk_108134_joined_allvars"
dataPath <- paste(dataDir,fileName,'.csv',sep = "")
target <- "ANTIGEN_MATCHED"
pos_class <- "1" # "MATCH"
## read & clean data
flu <- data.preprocess(read.csv(file = dataPath, stringsAsFactors = F), seed)
write.csv(flu,file = "final__flu_data.csv", quote = FALSE, row.names = FALSE)
library(fmsb)
